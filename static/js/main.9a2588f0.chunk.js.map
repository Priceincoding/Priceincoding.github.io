{"version":3,"sources":["components/shared/TitleHeader.jsx","components/home/index.js","components/shared/TypingText.jsx","components/App.js","serviceWorker.js","index.js"],"names":["TitleHeader","props","title","className","Home","React","Component","App","exact","activeClassName","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAYeA,G,YAVK,SAACC,GAAW,IACtBC,EAAUD,EAAVC,MAER,OACE,yBAAKC,UAAU,gBACZD,K,+DC2BQE,GC9BUC,IAAMC,UDClB,WACX,OACE,yBAAKH,UAAU,oBACb,kBAAC,EAAD,CAAaD,MAAM,iBACnB,yBAAKC,UAAU,yBAAf,gBAGA,yBAAKA,UAAU,UAAf,qEEuBSI,G,MAvBH,kBACV,kBAAC,IAAD,KACE,yBAAKJ,UAAU,aACb,4BAAQA,UAAU,UAChB,kBAAC,IAAD,CAASK,OAAK,EAACL,UAAU,WAAWM,gBAAgB,kBAAkBC,GAAG,KAAzE,OAMF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,QAIJ,qCChBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9a2588f0.chunk.js","sourcesContent":["import React from 'react';\n\nconst TitleHeader = (props) => {\n  const { title } = props;\n\n  return (\n    <div className=\"title-header\">\n      {title}\n    </div>\n  );\n};\n\nexport default TitleHeader;\n","import React from 'react';\nimport './home.scss';\n\nimport { TitleHeader } from '../shared';\n\nconst Home = () => {\n  return (\n    <div className=\"center-container\">\n      <TitleHeader title=\"INTRODUCTION\" />\n      <div className=\"sector home-emphasize\">\n        Hello there.\n      </div>\n      <div className=\"sector\">\n        ...\n        nothing quite to see here, at least at this point of time.\n      </div>\n      {/* <div className=\"sector home-emphasize\">\n        Lets have some colors.\n      </div>\n      <div className=\"sector blue\">\n        haha\n      </div> */}\n\n      {/* <div className=\"sector\">\n        <span className=\"home-emphasize\">\n          {'Toward perfection. '}\n        </span>\n        <br />\n        It is impossible,\n      </div> */}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Promise } from 'bluebird';\n\n\nclass TypingText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: '',\n      cursor: true,\n    };\n\n    this.texts = ['Hello', '你好', 'こんにちは'];\n    this.length = this.texts.length;\n\n    setTimeout(this.start, 1000);\n  }\n\n  start = () => {\n    this.write(0, 0);\n  }\n\n  write = async (index, i) => {\n    const text = this.texts[index];\n    if (i <= text.length) {\n      this.setText(text.slice(0, i));\n      await Promise.delay(100);\n      this.write(index, i + 1);\n    } else {\n      this.setCursor(false);\n      await Promise.delay(2000);\n      this.setCursor(true);\n      this.backspace(index, i);\n    }\n  }\n\n  backspace = async (index, i) => {\n    const text = this.texts[index];\n    if (i >= 0) {\n      this.setText(text.slice(0, i));\n      await Promise.delay(50);\n      this.backspace(index, i - 1);\n    } else {\n      await Promise.delay(1500);\n      this.write((index + 1) % this.length, 0);\n    }\n  }\n\n  setText = (text) => { this.setState({ text }); }\n\n  setCursor = (cursor) => { this.setState({ cursor }); }\n\n  renderCursor = () => {\n    const { cursor } = this.state;\n    return <span className={cursor ? 'typing-cursor' : 'typing-cursor-off'}>┃</span>;\n  }\n\n  renderText = () => {\n    const { text } = this.state;\n\n    return (\n      <span className=\"typing-text\">\n        {/* {this.texts[index]} */}\n        {text}\n      </span>\n    );\n  }\n\n  render = () => (\n    <div>\n      {this.renderText()}\n      {this.renderCursor()}\n    </div>\n  )\n}\n\nexport default TypingText;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from 'react-router-dom';\n\nimport Home from './home';\n\nimport './app.scss';\n\nconst App = () => (\n  <Router>\n    <div className=\"container\">\n      <header className=\"header\">\n        <NavLink exact className=\"nav-logo\" activeClassName=\"nav-link-active\" to=\"/\">BF</NavLink>\n        {/* <ul className=\"nav-link\">\n          <li><NavLink activeClassName=\"nav-link-active\" to=\"/link\">dmmy1</NavLink></li>\n          <li><NavLink activeClassName=\"nav-link-active\" to=\"/contact\">dmmy2</NavLink></li>\n        </ul> */}\n      </header>\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n\n      <footer>\n      </footer>\n    </div>\n  </Router>\n  \n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './normalize.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}