{"version":3,"sources":["components/DynamicTitle.js","components/App.js","serviceWorker.js","index.js"],"names":["DynamicTitle","props","start","write","index","i","a","text","texts","length","setText","slice","Promise","delay","setCursor","backspace","setState","cursor","_renderCursor","className","state","_renderText","render","setTimeout","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TA4EeA,E,YAxEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAaRC,MAAQ,WACN,EAAKC,MAAM,EAAG,IAfG,EAkBnBA,MAlBmB,uCAkBX,WAAOC,EAAOC,GAAd,eAAAC,EAAA,yDACAC,EAAO,EAAKC,MAAMJ,KACpBC,GAAKE,EAAKE,QAFR,uBAGJ,EAAKC,QAAQH,EAAKI,MAAM,EAAGN,IAHvB,SAIEO,UAAQC,MAAM,KAJhB,OAKJ,EAAKV,MAAMC,EAAOC,EAAE,GALhB,8BAOJ,EAAKS,WAAU,GAPX,UAQEF,UAAQC,MAAM,KARhB,QASJ,EAAKC,WAAU,GACf,EAAKC,UAAUX,EAAOC,GAVlB,4CAlBW,0DAgCnBU,UAhCmB,uCAgCP,WAAOX,EAAOC,GAAd,eAAAC,EAAA,yDACJC,EAAO,EAAKC,MAAMJ,KACpBC,GAAK,GAFC,uBAGR,EAAKK,QAAQH,EAAKI,MAAM,EAAGN,IAHnB,SAIFO,UAAQC,MAAM,IAJZ,OAKR,EAAKE,UAAUX,EAAOC,EAAE,GALhB,wCAOFO,UAAQC,MAAM,KAPZ,QAQR,EAAKV,OAAOC,EAAM,GAAK,EAAKK,OAAQ,GAR5B,4CAhCO,0DA4CnBC,QAAU,SAAAH,GAAU,EAAKS,SAAS,CAAET,UA5CjB,EA6CnBO,UAAY,SAAAG,GAAY,EAAKD,SAAS,CAAEC,YA7CrB,EA+CnBC,cAAgB,kBACd,0BAAMC,UAAW,EAAKC,MAAMH,OAAS,SAAW,cAAhD,WAhDiB,EAmDnBI,YAAc,WAAO,IACXd,EAAS,EAAKa,MAAdb,KAER,OACE,uBAAGY,UAAU,cAEVZ,IAzDY,EA8DnBe,OAAS,WACP,OACE,yBAAKH,UAAU,SACZ,EAAKE,cACL,EAAKH,kBA/DV,EAAKE,MAAQ,CACXb,KAAM,GACNU,QAAQ,GAGV,EAAKT,MAAQ,CAAC,cAAe,SAC7B,EAAKC,OAAS,EAAKD,MAAMC,OAEzBc,WAAW,EAAKrB,MAAO,KAXN,E,2BADMsB,IAAMC,WCgBlBC,G,MAbH,kBACV,yBAAKP,UAAU,aACb,4BAAQA,UAAU,WAElB,6BACE,kBAAC,EAAD,OAEF,oCCDgBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fcedebe5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Promise } from 'bluebird'\r\n\r\nclass DynamicTitle extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      text: '',\r\n      cursor: true,\r\n    }\r\n\r\n    this.texts = ['Boyuan Fang', 'Price']\r\n    this.length = this.texts.length\r\n\r\n    setTimeout(this.start, 1000)\r\n  }\r\n\r\n  start = () => {\r\n    this.write(0, 0)\r\n  }\r\n\r\n  write = async (index, i) => {\r\n    const text = this.texts[index]\r\n    if (i <= text.length) {\r\n      this.setText(text.slice(0, i))\r\n      await Promise.delay(100)\r\n      this.write(index, i+1)\r\n    } else {\r\n      this.setCursor(false)\r\n      await Promise.delay(2000)\r\n      this.setCursor(true)\r\n      this.backspace(index, i)\r\n    }\r\n  }\r\n\r\n  backspace = async (index, i) => {\r\n    const text = this.texts[index]\r\n    if (i >= 0) {\r\n      this.setText(text.slice(0, i))\r\n      await Promise.delay(50)\r\n      this.backspace(index, i-1)\r\n    } else {\r\n      await Promise.delay(2000)\r\n      this.write((index+1) % this.length, 0)\r\n    }\r\n  }\r\n\r\n  setText = text => { this.setState({ text })}\r\n  setCursor = cursor => { this.setState({ cursor })}\r\n\r\n  _renderCursor = () => (\r\n    <span className={this.state.cursor ? \"cursor\" : \"cursor-off\"}>â”ƒ</span>\r\n  )\r\n\r\n  _renderText = () => {\r\n    const { text } = this.state\r\n\r\n    return (\r\n      <p className=\"title-text\">\r\n        {/* {this.texts[index]} */}\r\n        {text}\r\n      </p>\r\n    )\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"title\">\r\n        {this._renderText()}\r\n        {this._renderCursor()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DynamicTitle","import React from 'react'\n\nimport DynamicTitle from './DynamicTitle'\n\nimport '../css/app.css'\n\nconst App = () => (\n  <div className=\"container\">\n    <header className=\"header\">\n    </header>\n    <div>\n      <DynamicTitle />\n    </div>\n    <footer>\n\n    </footer>\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/normalize.css'\nimport './css/index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}